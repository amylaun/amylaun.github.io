/***** MIXINS *****/
@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}
@mixin placeholder {
    ::-webkit-input-placeholder { @content }
    :-moz-placeholder           { @content }
    ::-moz-placeholder          { @content }
    :-ms-input-placeholder      { @content }
}
@mixin border-radius($radius) {
    -webkit-border-radius       : $radius;
    -moz-border-radius          : $radius;
    -ms-border-radius           : $radius;
    border-radius               : $radius;
}
@mixin background-size($bgSize) {
    -webkit-background-size     : $bgSize;
    -moz-background-size        : $bgSize;
    -o-background-size          : $bgSize;
    background-size             : $bgSize;
}
@mixin transition($setting) {
    -webkit-transition          : $setting;
    -moz-transition             : $setting;
    -ms-transition              : $setting;
    -o-transition               : $setting;
    transition                  : $setting;
}
@mixin transition-delay($setting) {
    -webkit-transition-delay    : $setting;
    -moz-transition-delay       : $setting;
    -ms-transition-delay        : $setting;
    -o-transition-delay         : $setting;
    transition-delay            : $setting;
}
@mixin transform($setting) {
    -webkit-transform           : $setting;
    -moz-transform              : $setting;
    -ms-transform               : $setting;
    -o-transform                : $setting;
    transform                   : $setting;
}
@mixin rotate ($degree) { @include transform(rotate(#{$degree}deg)); }
@mixin justify-content($pos) {            
    -webkit-box-pack		: $pos;
    -moz-box-pack		: $pos;
    -ms-flex-pack		: $pos;
    @if $pos == 'flex-end' {
    -ms-flex-pack		: end; }
    @if $pos == 'space-between' {
    	-ms-flex-pack		: justify; }
    -webkit-justify-content	: $pos;
    justify-content		: $pos;
}
@mixin flex-flow($values) {
	-webkit-flex-flow       : $values;
	-moz-flex-flow          : $values;
	-ms-flex-flow           : $values;
	flex-flow               : $values;
}
@mixin align-items($pos) {
  -webkit-box-align		: $pos;
  -moz-box-align		: $pos;
  -ms-flex-align		: $pos;
  -webkit-align-items		: $pos;
  align-items			: $pos;
}
@mixin align-self($pos) {
    -webkit-align-self	: $pos;
    align-self		: $pos;
}
@mixin flex-order($order) {
    -ms-flex-order	: $order;
    -webkit-order	: $order;
    order		: $order;
}
@mixin flex-wrap($wrap) {
    -ms-flex-wrap	: $wrap;
    -webkit-flex-wrap	: $wrap;
    flex-wrap		: $wrap;
}
@mixin flex {
	display : -webkit-box;
	display : -webkit-flex;
	display : -moz-flex;
	display : -ms-flexbox;
	display : flex;
}
%flex { @include flex; }
/* More flex configurations can be found here: [ https://github.com/mastastealth/sass-flex-mixin/blob/master/_flexbox.scss ] */

/***** LOOPS *****/
@mixin colorClasses($name, $value) {
  .#{$name}{
        color: $value; }
  .bg-#{$name}{
        background-color: $value; }
  .border-#{$name} {
        border-color: $value; }
}

/***** COLORS *****/
@each $c, $color in $colors {
    @include colorClasses($c, $color);
}

/***** BEM *****/
@mixin m($name) { /* Modifier */
    @at-root {
        /* '&' is a double-wrapped list */
        $selector: nth(&, 1);
        /* direct parent will be the last item in that list */
        $direct-parent: nth($selector, length($selector));
        /* modifier should have all properties of parent */
        #{$direct-parent}--#{$name} { @extend #{$direct-parent}; }
        /* '@content' will be in a nested selector however, if that is the context */
        #{&}--#{$name} { @content; }
    }
}
@mixin e($name) { /* Element */
    @at-root {
        #{&}__#{$name} {
            @content;
        }
    }
}
